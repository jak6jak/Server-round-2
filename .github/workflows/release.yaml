name: 'ðŸ“¦ Release'
on:
  # Manual trigger.
  workflow_dispatch:
    inputs:
      bump:
        type: string
        description: "major, minor, or patch"
        required: true
        default: "patch"
  # Reusable workflow trigger.
  workflow_call:
    secrets:
      NUGET_API_KEY:
        description: "API key for Nuget"
        required: true
    inputs:
      bump:
        type: string
        description: "major, minor, or patch"
        required: true
        default: "patch"

# Prevent overlapping releases on the same ref.
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write      # create release & read tags
  packages: write      # (future) if publishing to GHCR
  actions: read
  id-token: write      # (future) OIDC usage if moving off API keys

jobs:
  release:
    name: 'ðŸ“¦ Release'
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
    steps:
      - name: ðŸ§¾ Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: 'recursive'
          fetch-depth: 0 # So we can get all tags.

      - name: ðŸ”Ž Read Current Project Version
        id: current-version
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: "0.0.0-devbuild"

      - name: ðŸ–¨ Print Current Version
        run: |
          echo "Current Version: ${{ steps.current-version.outputs.tag }}"

      - name: ðŸ§® Compute Next Version
        uses: chickensoft-games/next-godot-csproj-version@v1
        id: next-version
        with:
          project-version: ${{ steps.current-version.outputs.tag }}
          godot-version: global.json
          bump: ${{ inputs.bump }}
      - uses: actions/setup-dotnet@v4
        name: ðŸ’½ Setup .NET SDK
        with:
          global-json-file: global.json
          cache: true

      - name: ðŸ“¦ Restore
        run: dotnet restore Server2/Server2.csproj

      - name: ï¿½ Build (Version Override)
        run: |
          set -euo pipefail
          dotnet build Server2/Server2.csproj -c Release -p:Version=${{ steps.next-version.outputs.version }}

      # Package generation occurs due to GeneratePackageOnBuild. Version overridden above.

      - name: ðŸ”Ž Get Package Path
        id: package-path
        run: |
          package=$(find ./Server2/nupkg -name "*.nupkg")
          echo "package=$package" >> "$GITHUB_OUTPUT"
          echo "ðŸ“¦ Found package: $package"

      - name: ðŸ“¤ Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ${{ steps.package-path.outputs.package }}
          if-no-files-found: error

      - name: âœ¨ Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ steps.next-version.outputs.version }}"
          gh release create --title "v$version" --generate-notes "$version" \
            "${{ steps.package-path.outputs.package }}"

      - name: ðŸ›œ Publish to Nuget
        run: |
          dotnet nuget push "${{ steps.package-path.outputs.package }}" \
            --api-key "${{ secrets.NUGET_API_KEY }}" \
            --source "https://api.nuget.org/v3/index.json" --skip-duplicate
